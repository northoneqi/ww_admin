<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Bwinfo">

	<resultMap id="RM.Bwinfo" type="com.bw.fortcrop.model.Bwinfo">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="detail" column="detail"/>
        <result property="pubdate" column="pubdate"/>
        <result property="income" column="income"/>
        <result property="keyword" column="keyword"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Bwinfo.columns">
	    <![CDATA[
		id,title,detail,pubdate,income,keyword
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Bwinfo.insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO bwinfo (
        	id ,
        	title ,
        	detail ,
        	pubdate ,
        	income ,
        	keyword 
        ) VALUES (
        	#{id} ,
        	#{title} ,
        	#{detail} ,
        	#{pubdate} ,
        	#{income} ,
        	#{keyword} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="Bwinfo.update" >
    <![CDATA[
        UPDATE bwinfo SET
	        title = #{title} ,
	        detail = #{detail} ,
	        pubdate = #{pubdate} ,
	        income = #{income} ,
	        keyword = #{keyword} 
        WHERE 
	        id = #{id} 
    ]]>
	</update>

    <delete id="Bwinfo.delete">
    <![CDATA[
        DELETE FROM bwinfo WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="Bwinfo.getById" resultMap="RM.Bwinfo">
		SELECT <include refid="Bwinfo.columns" />
	    <![CDATA[
		    FROM bwinfo 
	        WHERE 
		        id = #{id} 
	    ]]>
	</select>
	
	<sql id="Bwinfo.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(id)">
				AND id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(title)">
				AND title = #{title}
			</if>
	       <if test="@Ognl@isNotEmpty(detail)">
				AND detail = #{detail}
			</if>
	       <if test="@Ognl@isNotEmpty(pubdateBegin)">
				AND pubdate >= #{pubdateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(pubdateEnd)">
				AND pubdate &lt;= #{pubdateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(income)">
				AND income = #{income}
			</if>
	       <if test="@Ognl@isNotEmpty(keyword)">
				AND keyword = #{keyword}
			</if>
		</where>
	</sql>
		
    <select id="Bwinfo.findPage.count" resultType="long">
        SELECT count(*) FROM bwinfo 
		<include refid="Bwinfo.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Bwinfo.findPage" resultMap="RM.Bwinfo">
    	SELECT <include refid="Bwinfo.columns" />
	    FROM bwinfo 
		<include refid="Bwinfo.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

